'use strict';

const validator = require('validator'),
    schemaTypes = ['string', 'integer', 'number', 'date', 'boolean', 'email', 'fqnd', 'json', 'array', 'schema', 'file', 'binary', 'ignore'],
    knownFields = ['type', 'require', 'min', 'max', 'valueMin', 'valueMax', 'regEx', 'valueRegEx', 'arrayType', 'schema', 'additionalData', 'default'];

function validate(schema, errors, onlyKnownFields) {
    for (let field in schema) {

        //all fields known?

        if (field === 'includeSchema') {
            continue;
        }

        if (onlyKnownFields) {
            for (let subField in schema[field]) {
                if (knownFields.indexOf(subField) < 0) {
                    errors.push({ field: field, error: 'subfield ' + subField + ' is unknown' });
                }
            }
        }

        //has type?
        if (typeof schema[field].type === 'undefined') {
            if (typeof schema[field].OBJECT !== 'undefined') {
                // check this part and add to errors
                validateSchema(schema[field].OBJECT);
            } else {
                errors.push({ field: field, error: 'missing type' });
            }
        } else if (schemaTypes.indexOf(schema[field].type) > -1) {
            if (schema[field].type === 'schema') {                  // has schema?
                if (typeof schema[field].schema === 'undefined') {  // schema define?
                    errors.push({ field: field, error: 'type is >schema< but without declaration' });
                }
            } else if (schema[field].type === 'array') {
                if (typeof schema[field].arrayType === 'undefined' ||  schemaTypes.indexOf(schema[field].arrayType) < 0) {
                    errors.push({ field: field, error: 'wrong array type' });

                }
            }

        } else {
            errors.push({ field: field, error: 'wrong type' });
        }

        //todo: check if type only string or int
        if (typeof schema[field].require !== 'undefined') {
            if (!validator.isBoolean(schema[field].require.toString())) {
                errors.push({ field: field, error: 'wrong value for >require<' });
            }
        }

        if (typeof schema[field].min !== 'undefined') {
            if (typeof schema[field].min !== 'number') {
                errors.push({ field: field, error: 'wrong value for >min<' });
            }
        }

        if (typeof schema[field].max !== 'undefined') {
            if (typeof schema[field].max !== 'number') {
                errors.push({ field: field, error: 'wrong value for >max<' });
            }

        }

        if (schema[field].require === true && typeof schema[field].default !== 'undefined') {
            errors.push({ field: field, error: 'not allowed to set require=true and default value' });
        }

    }

    return errors;
}

let validateSchema = function (schema, onlyKnownFields) {    // jshint ignore:line
    let errors = [],
        result = validate(schema, errors, onlyKnownFields);

    return result;
};

module.exports = validateSchema;
