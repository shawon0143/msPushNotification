'use strict';

const validateSchema = require('./validateSchema'),
    validateObject = require('./validateObject'),
    util = require('util');

class schemaValidator {
    constructor(warningMode, log) {
        this.loadedSchemas = {};
        this.warningMode = warningMode;
        this.log = log;
        if (this.warningMode !== 'strict' && this.warningMode !== 'debug' && this.warningMode !== 'ignore') {
            this.warningMode = 'strict';
        }
    }

    addSchema(schemaName, schema, convertTypes, onlyKnownFields) {
        convertTypes = (convertTypes === true);
        if (typeof this.loadedSchemas[schemaName] !== 'undefined') {
            if (this.log) {
                this.log.error(`${schemaName} will not add because it exists`);
            } else {
                console.log(`${schemaName} will not add because it exists`);
            }

            return false;
        }

        let errors = validateSchema(schema, onlyKnownFields);

        if (errors.length > 0) {
            if (this.log) {
                this.log.error(`${schemaName} will not add, wrong formatted, errors: ${util.inspect(errors)}`);
            } else {
                console.log(`${schemaName} will not add, wrong formatted, errors: ${util.inspect(errors)}`);
            }

            return false;
        } else {
            schema.__convertTypes = convertTypes;
            this.loadedSchemas[schemaName] = schema;
        }

        return true;
    }

    getSchemaFields(schemaName) {
        let schema = this.loadedSchemas[schemaName];
        if (!schema) {
            return null;
        }

        var result = {};
        for (let field in schema) {
            if (!field.startsWith('__')) {
                result[field] = schema[field];
            }
        }

        return result;
    }

    validateObject(schemaName, object, err, warn, removeUnknownFields) {
        let errors = (err) ? err : [],
            warnings = (warn) ? warn : [];

        validateObject(schemaName, object, this.loadedSchemas, errors, warnings, removeUnknownFields);
        if (errors.length > 0) {
            return false;
        }

        if (warnings.length > 0) {
            if (this.warningMode === 'strict') {
                errors.push.apply(errors, warnings);
                warnings.length = 0;
                return false;
            } else if (this.warningMode === 'ignore') {
                warnings.length = 0;
                return true;
            }
        }

        return true;
    }
}

module.exports = schemaValidator;
