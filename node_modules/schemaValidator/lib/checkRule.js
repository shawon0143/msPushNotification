'use strict';

const validator = require('validator'),
    moment = require('moment');

function convertValue(value, convertType) {
    switch (convertType) {
        case 'number':
            if (typeof value !== 'number') {
                return parseFloat(value.toString(), 10);
            }

            break;
        case 'integer':
            if (typeof value !== 'number') {
                return parseInt(value.toString(), 10);
            }

            break;
        case 'string':
            if (typeof value !== 'string') {
                return value.toString();
            }

            break;
    }
    return value;
}

function checkRule(rules, value, fieldName, convertTypes, errors) {
    let convertedResult = null;
    if (typeof rules.type !== 'undefined') {
        let typeOk = false;

        if (value === null) {
            let require = (typeof rules.require !== 'undefined') ? rules.require : false;
            if (require) {
                errors.push(`"${fieldName}" has no value => 'NULL'`);
            }

            return null;
        }

        if (typeof value === 'undefined') {
            let require = (typeof rules.require !== 'undefined') ? rules.require : false;
            if (require) {
                errors.push(`"${fieldName}" has no value => 'UNDEFINED'`);
            }

            return;
        }

        switch (rules.type) {
            case 'ignore' :
                typeOk = true;
                return;

            case 'string' :
                typeOk = (typeof value === 'string' || value === null);
                break;

            case 'email' :
                typeOk = validator.isEmail(value.toString());
                break;

            case 'number':
                typeOk = validator.isFloat(value.toString());
                if (typeOk) {
                    if (typeof value !== 'number') {
                        if (convertTypes) {
                            convertedResult = parseFloat(value.toString(), 10);
                        } else {
                            typeOk = false;
                        }
                    }
                }

                break;

            case 'integer':
                typeOk = validator.isInt(value.toString());
                if (typeOk) {
                    if (typeof value !== 'number') {
                        if (convertTypes) {
                            convertedResult = convertedResult = parseInt(value.toString(), 10);
                        } else {
                            typeOk = false;
                        }
                    }
                }

                break;

            case 'date':
                typeOk = moment(value).isValid();
                break;

            case 'boolean':
                typeOk = validator.isBoolean(value.toString());
                break;

            case 'fqnd':
                typeOk = validator.isFQDN(value.toString());
                break;

            case 'json':
                if (typeof value === 'object') {
                    typeOk = true;
                } else {
                    typeOk = false;
                }

                break;

            case 'array':
                typeOk = (Array.isArray(value));
                break;

            case 'file' :
                typeOk = true;
                break;

            case 'binary' :
                typeOk = true;
                break;

            case 'schema':
                typeOk = true;
                break;

            default:
                errors.push(`"${fieldName}" ${rules.type} is an undefined type`);
                return;
        }
        if (!typeOk) {
            errors.push(`"${fieldName}" has an wrong type. should have ${rules.type} -> but is ${typeof value} (${value})`);
            return;
        }
    }

    //length max
    if (typeof rules.max !== 'undefined') {
        if (rules.type === 'string') {
            if (value.length > rules.max) {
                errors.push(`"${fieldName}" too long ${value.length} max: ${rules.max}`);
            }
        } else if (rules.type === 'file') {
            if (value.size > rules.max) {
                errors.push(`"${fieldName}" file is to big ${value.size} max: ${rules.max}`);
            }
        } else if (value > rules.max) {
            errors.push(`"${fieldName}" too high ${value} max: ${rules.max}`);
        }

    }

    //length min
    if (typeof rules.min !== 'undefined') {
        if (rules.type === 'string') {
            if (value.length < rules.min) {
                errors.push(`"${fieldName}" too short ${value.length} min: ${rules.min}`);
            }
        } else if (rules.type === 'file') {
            if (value.size < rules.min) {
                errors.push(`$"${fieldName}" file is to small ${value.size} min: ${rules.min}`);
            }
        } else if (value < rules.min) {
            errors.push(`"${fieldName}" too low ${value} min: ${rules.min}`);
        }
    }

    //check regEx
    if (typeof rules.regEx !== 'undefined') {
        if (rules.type !== 'string') {
            errors.push(`can not check regEx for "${fieldName}" type ${rules.type}, only string is allowed`);
        } else {
            var regEx = new RegExp(rules.regEx);
            if (!regEx.test(value)) {
                errors.push(`"${fieldName}" value don''t fits regEx ${rules.regEx}`);
            }
        }
    }

    return convertedResult;
}

module.exports = checkRule;
module.exports.convertValue = convertValue;
