'use strict';

const SchemaValidator = require('../index'),
    schemaValidator = new SchemaValidator(),
    SchemaObject = require('../index').schemaObject,
    sampleSchemas = require('./sampleSchemas'),
    sampleData = require('./sampleData'),
    expect = require('chai').expect;

describe('load', () => {
    it('person', () => {
        schemaValidator.addSchema('person', sampleSchemas.person);
        schemaValidator.addSchema('address', sampleSchemas.schemaAddress);
        schemaValidator.addSchema('schemaComplete', sampleSchemas.schemaComplete);
        schemaValidator.addSchema('bank', sampleSchemas.schemaBank);
        schemaValidator.addSchema('arrayInt', sampleSchemas.arrayInt);
        schemaValidator.addSchema('arrayString', sampleSchemas.arrayString);
        schemaValidator.addSchema('arraySchema', sampleSchemas.arraySchema);
    });
});

describe('Simple schemas', () => {

    it('person', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', sampleData.person, err, warn);
        expect(result).to.equal(true);
    });

    it('person', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { name: 'hallo', info: null }, err, warn);
        expect(result).to.equal(true);
    });

    it('person => add field wich is not defined', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { namee: 9 }, err, warn);

        expect(result).to.equal(false);
    });

    it('person => miss required field', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { firstName: 'Christian' }, err, warn);

        expect(result).to.equal(false);
    });

});

describe('String Tests', () => {
    it('too short', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { name: 'dfd' }, err, warn);

        expect(result).to.equal(false);
    });

    it('too long', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { name: 'dfddfsdfasdfsafsadfasdfasdfasdfasfsad' }, err, warn);

        expect(result).to.equal(false);
    });

    it('ok', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { name: 'klsdjfksajfks' }, err, warn);

        expect(result).to.equal(true);
    });
});

describe('Number Tests', () => {
    it('too short', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { age: 2 }, err, warn);

        expect(result).to.equal(false);
    });

    it('too long', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { age: 60 }, err, warn);

        expect(result).to.equal(false);
    });

    it('ok', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('person', { name: 'Andreas', age: 10 }, err, warn);

        expect(result).to.equal(true);
    });
});

//schemaValidator.validateObject();

describe('Sub schema', () => {
    it('Schema from two schemas - good data', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('schemaComplete', sampleData.complete, err, warn);

        expect(result).to.equal(true);
    });

    it('Schema from two schemas - bad data', () => {
        let err = [],
            warn = [],
            data = JSON.parse(JSON.stringify(sampleData.complete));

        data.address.city = 'JO'; // two short
        let result = schemaValidator.validateObject('schemaComplete', data, err, warn);
        expect(result).to.equal(false);
    });

    let bankData = {
        bankName: 'Bank Austria',
        bic: 'dflksdjflksdfjasjdfsl',
        konto: {
            id: 9879878123,
            iban: 'dfsfasdfasd'
        },
        inhaber: 'Christian Nagel'
    };

    it('Schema mixed with object in definition - good data', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject('bank', bankData, err, warn);
        expect(result).to.equal(true);
    });

    it('Schema mixed with object in definition - bad data', () => {
        bankData.konto.iban = 'dd'; // to short

        let err = [],
            warn = [],
            result = schemaValidator.validateObject('bank', bankData, err, warn);
        expect(result).to.equal(false);
    });

});

describe('Array', () => {
    describe('Integer', () => {
        it('regular', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayInt', { numbers: [5, 6, 7, 8, 9, 10] }, err, warn);
            expect(result).to.equal(true);
        });

        it('no min items', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayInt', { numbers: [5, 6, 7, 8] }, err, warn);
            expect(result).to.equal(false);
        });

        it('to many items', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayInt', { numbers: [5, 6, 7, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] }, err, warn);
            expect(result).to.equal(false);
        });

        it('one of items to low', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayInt', { numbers: [1, 6, 7, 8, 9, 10] }, err, warn);
            expect(result).to.equal(false);
        });

        it('one of items to high', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayInt', { numbers: [5, 6, 7, 8, 9, 20] }, err, warn);
            expect(result).to.equal(false);
        });
    });

    describe('String', () => {
        it('regular', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: ['Christian'] }, err, warn);
            expect(result).to.equal(true);
        });

        it('no min items', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: [] }, err, warn);
            expect(result).to.equal(false);
        });
        it('no many items', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: ['Christian', 'Christian', 'Christian', 'Christian', 'Christian', 'Christian', 'Christian', 'Christian', 'Christian'] }, err, warn);
            expect(result).to.equal(false);
        });
        it('one items length to low', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: ['Christian', 'Christian', 'Christian', 'C', 'Christian'] }, err, warn);
            expect(result).to.equal(false);
        });
        it('one items length to low', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: ['Christian', 'Christian', 'Christian', 'Christian Nagel'] }, err, warn);
            expect(result).to.equal(false);
        });
        it('one items wrong type', () => {
            let err = [],
                warn = [],
                result = schemaValidator.validateObject('arrayString', { names: ['Christian', 'Christian', 39, 'Christian Nagel'] }, err, warn);
            expect(result).to.equal(false);
        });
    });

    describe('Schema', () => {
        it('regular', () => {
            let err = [],
                warn = [],
                data = { name: 'Nagel', firstName: 'Christian', age: 43 },
                result = schemaValidator.validateObject('arraySchema', { obj: [data] }, err, warn);
            expect(result).to.equal(true);
        });
        it('one field from the obj is not correct', () => {
            let err = [],
                warn = [],
                data = { name: 'Na', firstName: 'Christian', age: 43 },
                result = schemaValidator.validateObject('arraySchema', { obj: [data] }, err, warn);
            expect(result).to.equal(false);
        });
        it('one item is not a object', () => {
            let err = [],
                warn = [],
                data = { name: 'Nagel', firstName: 'Christian', age: 43 },
                result = schemaValidator.validateObject('arraySchema', { obj: [data, 'test'] }, err, warn);
            expect(result).to.equal(false);
        });
    });
});

describe('without add before', () => {
    it('regular', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { name: 'Sandra', number: 2 }, err, warn);
        expect(result).to.equal(true);
    });
    it('miss field', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { number: 2 }, err, warn);
        expect(result).to.equal(false);
    });
    it('int to high', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { name: 'Sandra', number: 10 }, err, warn);
        expect(result).to.equal(false);
    });
    it('int to low', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { name: 'Sandra', number: 0 }, err, warn);
        expect(result).to.equal(false);
    });
    it('string to long', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { name: 'Sandfdfdfdfdfdfdfdfdfdfdfdfddra', number: 2 }, err, warn);
        expect(result).to.equal(false);
    });
    it('string to short', () => {
        let err = [],
            warn = [],
            schema = {
                name: { type: 'string', require: true, min: 5, max: 20 },
                number: { type: 'number', min: 1, max: 3 }
            },
            result = schemaValidator.validateObject(schema, { name: 'San', number: 2 }, err, warn);
        expect(result).to.equal(false);
    });

    let instantSchema = {
        name: { type: 'string', require: true, min: 5, max: 20 },
        number: { type: 'number', min: 1, max: 3 },
        address: {
            type: 'schema', require: true, schema: {
                street: { type: 'string', require: true, min: 5, max: 20 },
                city: { type: 'string', require: true, min: 5, max: 20 }
            },
        },
    };
    it('with object', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject(instantSchema, { name: 'Christian', number: 2, address: { street: 'Ingling 67', city: 'Schardenberg' } }, err, warn);
        expect(result).to.equal(true);
    });
    it('without the object', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject(instantSchema, { name: 'Christian', number: 2 }, err, warn);
        expect(result).to.equal(false);
    });

    it('with object, but without city', () => {
        let err = [],
            warn = [],
            result = schemaValidator.validateObject(instantSchema,  { name: 'Christian', number: 2, address: { street: 'Ingling 67' } }, err, warn);
        expect(err[0]).to.equal('required field city not found');
        expect(result).to.equal(false);
    });
});

describe('Schema Object', () => {

    it('person', () => {
        const person = {
            name: { type: 'string', require: true, min: 5, max: 20 },
            firstName: { type: 'string', require: false, min: 5, max: 50 },
            age: { type: 'number', require: false, min: 3, max: 50 }
        };
        const schemaAddress = {
            street : { type: 'string', require: true, min: 5, max: 100 },
            zip: { type: 'string', require: true, min: 4, max: 8 },
            city : { type: 'string', require: true, min: 5, max: 100 }
        };
        const schemaComplete = {
            person: { type: 'schema', schema: 'person', require: true },
            address: { type: 'schema', schema: 'address', require: true }
        };


/*        let data = new SchemaObject({ person: person }, { address: schemaAddress }, { schemaComplete: schemaComplete }),
            test = { person: { name: 'Nagel', firstName: 'tests' }, address: { street: 'Ingling 67', zip: '4343', city: 'Schardenberg' } };
        data.set(test);
        console.log(data.get());
        data.options({ alwaysCheck: false });*/
    });
});
