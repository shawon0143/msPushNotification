'use strict';

const SchemaValidator = require('../index'),
    schemaValidator = new SchemaValidator('debug'),
    util = require('util');


const errorMsg = {
    errorCode : { type: 'integer', require: true }
}

const schemaTest = {
    test : { type: 'string', require: true, min: 5, max: 100 },
}

const schemaAddress = {
    street : { type: 'string', require: true, min: 5, max: 100 },
    zip: { type: 'string', require: true, min: 4, max: 8 },
    city : { type: 'string', require: true, min: 5, max: 100 }
};

const schemaPerson = {
    lastName: { type: 'string', require: true, min: 2, max: 20 },
    firstName: { type: 'string', require: true, min: 2, max: 50, regEx: '^[A-Z]+[a-zA-Z]*$' },
    nickNames: { type: 'array', arrayType: 'string', min: 1, max: 3, require: false, valueMin: 2, valueMax: 50, valueRegEx: '^[A-Z]+[a-zA-Z]*$' },
    age: { type: 'number', require: false, min: 3, max: 50 },
    test: { type: 'schema', require: false, schema: 'schemaTest on test=hallo' }
};

const schemaPersonAndAddress = {
    personAndAddress: { type: 'schema', require: true, schema: 'errorMsg, person, address on errorCode=0 and firstName=Maxi and lastName=Muster, address on errorCode=2' }
}

const schemaChatMessageText = {
    text: { type: 'string', require: false, default: 'Hallo'}
}

const schemaChatMessageHtml = {
    html: { type: 'string', require: true }
}

const schemaChatMessage = {
    errorCode: { type: 'integer', require: true },
    type: { type: 'integer', require: true },
    addedHtml: { type: 'integer', require: false, default: 1 },
    includeSchema: 'chatMessageText on errorCode=0 and type>0, chatMessageHtml on errorCode=0 and type=2 and addedHtml=1'
}

schemaValidator.addSchema('schemaTest', schemaTest, true, true);
schemaValidator.addSchema('errorMsg', errorMsg, true, true);
schemaValidator.addSchema('person', schemaPerson, true, true);
schemaValidator.addSchema('address', schemaAddress, true, true);
schemaValidator.addSchema('personAndAddress', schemaPersonAndAddress, true, true);

schemaValidator.addSchema('chatMessageText', schemaChatMessageText, false, true);
schemaValidator.addSchema('chatMessageHtml', schemaChatMessageHtml, false, true);
schemaValidator.addSchema('chatMessage', schemaChatMessage, false, true);

let errors = [],
    warnings = [];

//var result = schemaValidator.validateObject('personAndAddress', { personAndAddress: { errorCode: 0, age: 3, test: { test: 'hallo' }, firstName: 'Maxi', lastName: 'Muster', nickNames: ['Maxi'], street: 'MaxStrasse', zip: '12345', city: 'Teststadt' } }, errors, warnings);

var checkObject = { errorCode: 0, type: 2, text: "hallo", html: "huhu", yeah: "test" };
//var checkObject = { errorCode: 0, type: 2, html: "huhu" };

var result = schemaValidator.validateObject('chatMessage', checkObject, errors, warnings, true);

console.log("ob: " + util.inspect(checkObject));
console.log(result);
console.log(errors);
console.log(warnings);