import * as WebSocket from 'ws';

declare module jsonSocket {

    export type CommandCall = (json: any, connectionData: ConnectionData) => void;
    export type CommandCallback = (json: any, connectionData: ConnectionData) => void;
    export type ConnectCallback = (connected: boolean, connectionData: ConnectionData) => void;
    export type AppendedBinaries = Array<any>;
    export type DisconnectCall = (connectionData: ConnectionData) => void;

    interface ClientConfig {
        useTls?: boolean,
        log?: any,
        logLevel?: number,
        logFile?: string
    }

    interface ServerConfig {
        log?: any,
        logLevel?: number,
        logFile?: string,
        sslKey?: string,
        sslCert?: string
    }


    export class ConnectionData {
        sendRequest(command: string, callbackOnAnswer: CommandCallback, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): void;
        sendRequest(command: string, params: any, callbackOnAnswer: CommandCallback, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): void;
        sendRequestPromise(command: string, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): Promise<any>;
        sendRequestPromise(command: string, params: any, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): Promise<any>;
        sendResponse(responseId: number, errorCode: number, params?: any, appendBinary?: AppendedBinaries): void;
        disconnect(): void;
        getConnectionType(): 'none'|'jsonSocket'|'webSocket';
        getIp(): string;
    }

    class JsonSocket {
        setRemoveResponseFieldsNotInSchema(value: boolean): void;
        setDisconnectOnSendTimeout(value: boolean): void;
        setDisconnectTimeout(milliseconds: number): void;
        setSendTimeout(milliseconds: number): void;
        setOnDisconnect(onDisconnectCallback: DisconnectCall): void;
        setCommandsAndSchemas(settings: any, commands: any, schemas: any): void;
        registrateCommand(command: string, ...callFunctions: CommandCall[]): void;
        sendRequest(connectionData: ConnectionData, command: string, params: any, callbackOnAnswer: CommandCallback, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): void;
        sendRequestPromise(connectionData: ConnectionData, command: string, params: any, appendBinary?: AppendedBinaries, timeoutMilliseconds?: number): Promise<any>;
        sendResponse(connectionData: ConnectionData, responseId: number, errorCode: number, params: any, appendBinary?: AppendedBinaries): void;
        disconnect(connectionData: ConnectionData): void;
    }

    export class clients extends JsonSocket {
        constructor(config: ClientConfig, onUnknownCommandFunction: CommandCall);
        connect(ip: string, port: number, connectCallback: ConnectCallback): ConnectionData;
        connectWs(path: string, connectCallback: ConnectCallback): ConnectionData;
    }

    export class server extends JsonSocket {
        constructor(config: ServerConfig, onUnknownCommandFunction: CommandCall);
        createServer(listenIp: string, port: number, webSocketServer?: WebSocket.Server): void;
        reloadSSLCertificate(sslKey: any, sslCert: any): void;
        setOnConnect(connectionData: ConnectionData): void;
    }
}

export = jsonSocket;