'use strict';

const JsonSocket = require('./jsonSocket.js'),
    ConnectionData = require('./jsonSocket.js').ConnectionData,
    net = require('net'),
    tls = require('tls'),
    WebSocketClient = require('ws');

class JsonSocketClients extends JsonSocket {

    constructor(config, onUnknownCommandFunction) {
        super(config, onUnknownCommandFunction);
    }

    connect(ip, port, connectCallback) {
        let connectionData;

        if (this.config.useTls) {
            connectionData = new ConnectionData(new tls.TLSSocket(), this);
        } else {
            connectionData = new ConnectionData(new net.Socket(), this);
        }

        function connectFailed(err) {
            connectCallback(false, connectionData);
        }

        connectionData.socket.on('error', connectFailed);

        connectionData.socket.connect(port, ip, () => {
            connectionData.socket.removeListener('error', connectFailed);
            connectionData.connected = true;
            this.setSocketConfigAndEvents(connectionData, this);
            connectCallback(true, connectionData);
        });

        return connectionData;
    }

    connectWs(path, connectCallback) {
        let connectionData;

        let wsc = new WebSocketClient(path);
        connectionData = new ConnectionData(undefined, this, wsc);

        function connectFailed(err) {
            connectCallback(false, connectionData);
        }

        wsc.on('error', connectFailed);
        wsc.on('open', () => {
            wsc.removeListener('error', connectFailed);
            connectionData.connected = true;
            this.setSocketConfigAndEvents(connectionData, this);
            connectCallback(true, connectionData);
        });

        return connectionData;
    }
}

module.exports = JsonSocketClients;
