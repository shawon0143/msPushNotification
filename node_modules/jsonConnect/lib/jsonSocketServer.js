'use strict';

const JsonSocket = require('./jsonSocket.js'),
    ConnectionData = require('./jsonSocket.js').ConnectionData,
    net = require('net'),
    tls = require('tls');

class JsonSocketServer extends JsonSocket {

    constructor(config, onUnknownCommandFunction) {
        super(config, onUnknownCommandFunction);
        this.onConnect = null;
    }

    openAndListen(options) {
        var socketClass = net;
        if (options.key && options.cert) {
            socketClass = tls;
        }

        try {
            this.server = socketClass.createServer(options, (serverSocket) => {
                var connectionData = new ConnectionData(serverSocket, this);
                connectionData.connected = true;
                connectionData.socket.setEncoding('binary');
                this.setSocketConfigAndEvents(connectionData);

                if (this.onConnect) {
                    this.onConnect(connectionData);
                }
            });
            this.server.listen(this.listenPort, this.listenIp);
            if (this.webSocketServer) {
                this.webSocketServer.on('headers', (headers, req) => {
                    //
                });
                this.webSocketServer.on('connection', (wsConnection, req) => {
                    var connectionData = new ConnectionData(undefined, this, wsConnection);
                    connectionData.connected = true;
                    this.setSocketConfigAndEvents(connectionData);
                    if (this.onConnect) {
                        this.onConnect(connectionData);
                    }
                });

            }
        }
        catch (err) {
            this.log.crit('stopping process in jsonSocketServer openAndListen, critical error: ' + err.stack);
            process.exit(1);
        }
    }

    createServer(listenIp, port, webSocketServer) {
        var options = {};
        this.listenIp = listenIp;
        this.listenPort = port;
        this.webSocketServer = webSocketServer;
        if (this.config.sslKey && this.config.sslCert) {
            options.key = this.config.sslKey;
            options.cert = this.config.sslCert;
        }

        this.openAndListen(options);
    }

    reloadSSLCertificate(sslKey, sslCert) {
        if (this.server) {
            this.server.close(() => {
                var options = { key: sslKey, cert: sslCert };
                this.openAndListen(options);
            });
        }
    }

    setOnConnect(onConnectCallback) {
        this.onConnect = onConnectCallback;
    }
}

module.exports = JsonSocketServer;
